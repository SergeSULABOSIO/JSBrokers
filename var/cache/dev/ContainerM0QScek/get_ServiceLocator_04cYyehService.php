<?php

namespace ContainerM0QScek;

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

/**
 * @internal This class has been auto-generated by the Symfony Dependency Injection Component.
 */
class get_ServiceLocator_04cYyehService extends App_KernelDevDebugContainer
{
    /**
     * Gets the private '.service_locator.04cYyeh' shared service.
     *
     * @return \Symfony\Component\DependencyInjection\ServiceLocator
     */
    public static function do($container, $lazyLoad = true)
    {
        return $container->privates['.service_locator.04cYyeh'] = new \Symfony\Component\DependencyInjection\Argument\ServiceLocator($container->getService, [
            'assureurRepository' => ['privates', 'App\\Repository\\AssureurRepository', 'getAssureurRepositoryService', true],
            'clientRepository' => ['privates', 'App\\Repository\\ClientRepository', 'getClientRepositoryService', true],
            'outstandingCommissionRepository' => ['privates', 'App\\Repository\\OutstandingCommissionRepository', 'getOutstandingCommissionRepositoryService', true],
            'paginatorInterface' => ['privates', '.errored.3RSg63L', NULL, 'Cannot determine controller argument for "App\\Controller\\OutstandingCommissionController::index()": the $paginatorInterface argument is type-hinted with the non-existent class or interface: "Knp\\Component\\Pager\\PaginatorInterface".'],
            'paiementCommissionRepository' => ['privates', 'App\\Repository\\PaiementCommissionRepository', 'getPaiementCommissionRepositoryService', true],
            'partenaireRepository' => ['privates', 'App\\Repository\\PartenaireRepository', 'getPartenaireRepositoryService', true],
            'policeRepository' => ['privates', 'App\\Repository\\PoliceRepository', 'getPoliceRepositoryService', true],
            'produitRepository' => ['privates', 'App\\Repository\\ProduitRepository', 'getProduitRepositoryService', true],
            'taxeRepository' => ['privates', 'App\\Repository\\TaxeRepository', 'getTaxeRepositoryService', true],
        ], [
            'assureurRepository' => 'App\\Repository\\AssureurRepository',
            'clientRepository' => 'App\\Repository\\ClientRepository',
            'outstandingCommissionRepository' => 'App\\Repository\\OutstandingCommissionRepository',
            'paginatorInterface' => '?',
            'paiementCommissionRepository' => 'App\\Repository\\PaiementCommissionRepository',
            'partenaireRepository' => 'App\\Repository\\PartenaireRepository',
            'policeRepository' => 'App\\Repository\\PoliceRepository',
            'produitRepository' => 'App\\Repository\\ProduitRepository',
            'taxeRepository' => 'App\\Repository\\TaxeRepository',
        ]);
    }
}
